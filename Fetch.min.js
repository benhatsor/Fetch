class Fetch{defaults={respType:["json","text"],onlyBody:!0,prefix:""};methods=["GET","HEAD","POST","PUT","DELETE","CONNECT","OPTIONS","TRACE","PATCH"];constructor(){this.methods.forEach(t=>{this[t=t.toLowerCase()]=this.getMethod(t)})}getMethod(t){return t=t.toUpperCase(),(e,i={})=>(i.method=t,this.fetch(e,i))}async fetch(t,e={}){let{isString:i,coerceValueToString:s}=this.util;for(let r in this.defaults)r in e||(e[r]=this.defaults[r]);if(i(e.prefix)&&i(t)){t=s(t);let o=s(e.prefix);t=o+t}let a=fetch(t,e),l=await a;return(await this.parseRespBody(l,e.respType),e.onlyBody)?l.body:l}async parseRespBody(t,e){let{isValidFunction:i,setReadOnlyProp:s}=this.util;if(Array.isArray(e)){if(0!==e.length){let r=await this.parseRespBody(t,e[0]);return r||(e.shift(),await this.parseRespBody(t,e))}}else if(i(e,t)){let o=t[e],a;try{a=await o.call(t)}catch(l){return}return s(t,"body",a),!0}}util={isValidFunction:(t,e)=>t in e&&"function"==typeof e[t],setReadOnlyProp(t,e,i){Object.defineProperty(t,e,{value:i})},isString:t=>"[object String]"===Object.prototype.toString.call(t),coerceValueToString:t=>`${t}`}}Fetch=new Fetch;
